//  Copyright (C) 2003  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
//  CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS 
// 
//  This library is free software; you can redistribute it and/or 
//  modify it under the terms of the GNU Lesser General Public 
//  License as published by the Free Software Foundation; either 
//  version 2.1 of the License. 
// 
//  This library is distributed in the hope that it will be useful, 
//  but WITHOUT ANY WARRANTY; without even the implied warranty of 
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
//  Lesser General Public License for more details. 
// 
//  You should have received a copy of the GNU Lesser General Public 
//  License along with this library; if not, write to the Free Software 
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA 
// 
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//
//
//
//  File   : GHS3D_Algorithm.idl
//  Author : Julia DOROVSKIKH
//  $Header$

#ifndef _GHS3D_Algorithm_IDL_
#define _GHS3D_Algorithm_IDL_

#include "SALOME_Exception.idl"
#include "SMESH_Hypothesis.idl"

/*!
 * GHS3DPlugin: interfaces to GHS3D related hypotheses and algorithms
 */
module GHS3DPlugin
{
  /*!
   * GHS3DPlugin_GHS3D: interface of "Tetrahedron (GHS3D)" algorithm
   */
  interface GHS3DPlugin_GHS3D : SMESH::SMESH_3D_Algo
  {
  };

  /*!
   * Parameters of "Tetrahedron (GHS3D)" algorithm
   */
  interface GHS3DPlugin_Hypothesis : SMESH::SMESH_Hypothesis
  {
    /*!
     * To mesh "holes" in a solid or not. Default is to mesh.
     */
    void SetToMeshHoles(in boolean toMesh);
    boolean GetToMeshHoles();
    /*!
     * Maximal size of memory to be used by the algorithm (in Megabytes).
     * Negative value means not to use this option
     */
    void SetMaximumMemory(in short MB);
    short GetMaximumMemory();
    /*!
     * Initial size of memory to be used by the algorithm (in Megabytes) in
     * automatic memory adjustment mode. Default is zero.
     * Negative value means not to use this option
     */
    void SetInitialMemory(in short MB);
    short GetInitialMemory();
    /*!
     * Optimization level: 0-none, 1-light, 2-medium, 3-strong. Default is medium
     */
    void SetOptimizationLevel(in short level) raises (SALOME::SALOME_Exception);
    short GetOptimizationLevel();
    /*!
     * Path to working directory
     */
    void SetWorkingDirectory(in string path) raises (SALOME::SALOME_Exception);
    string GetWorkingDirectory();
    /*!
     * To keep working files or remove them. Log file remains in case of errors anyway.
     */
    void SetKeepFiles(in boolean toKeep);
    boolean GetKeepFiles();
  };
};

#endif
